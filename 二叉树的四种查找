public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) {
            val = x;
        }
        static String toString(TreeNode node){
            return String.format("%c",node.val);
        }
        //(1)查找值，返回结点
    static TreeNode search1(TreeNode root,int val){
            //1.判断是否为空
            if(root==null){
                return null;
            }
            //2.在当前根节点进行查找
            if(root.val==val){
                return root;
            }
            //3.在左子树进行查找
            TreeNode left=search1(root.left,val);
            if(left!=null){
                return left;
            }
            return search1(root.right,val);
    }
    //(2)查找值，判断是否存在
    static boolean search2(TreeNode root,int val){
            if(root==null){
                return false;
            }
            if(root.val==val){
                return true;
            }
            if(search2(root.left,val)){
                return true;
            }
            return search2(root.right,val);
    }
    //（3）查找子树，返判断是否存在
    static boolean search3(TreeNode root,TreeNode sonRoot){
            if(root==null){
                return false;
            }
            if(isSameTree(root,sonRoot)){
                return true;
            }
            if(search3(root.left,sonRoot)){
                return true;
            }
            return search3(root.right,sonRoot);
    }

    //判断两个树是否相等
    static boolean isSameTree(TreeNode root1,TreeNode root2){
            if(root1==null&&root2==null){
                return true;
            }
            if(root1==null||root2==null){
                return false;
            }
            return root1.val==root2.val//根节点是否相同
                    &&isSameTree(root1.left,root2.left)//左子树是否相同
                    &&isSameTree(root1.right,root2.right);//右子树是否相同
    }
    //（4）判断是否是存在结点
    static boolean search4(TreeNode root,TreeNode node){
            if(root==null){
                return false;
            }
            if(root==node){
                return true;
            }
            if(search4(root.left,node)){
                return true;
            }
            return search4(root.right,node);
    }

    public static void main(String[] args) {
        TreeNode a=new TreeNode('a');TreeNode b=new TreeNode('b');
        TreeNode c=new TreeNode('c');TreeNode d=new TreeNode('d');
        TreeNode e=new TreeNode('e');TreeNode f=new TreeNode('f');
        TreeNode g=new TreeNode('g');TreeNode h=new TreeNode('h');
        a.left=b;b.left=d;b.right=e;
        e.right=h;a.right=c;c.left=f;c.right=g;
        System.out.println(toString(search1(a,'g')));
        System.out.println(search2(a,'b'));
        System.out.println(search3(a,c));
        TreeNode l=new TreeNode('l');
        System.out.println(search4(a,l));
    }
}
