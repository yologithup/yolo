//接口
public interface List {
    void pushBack(int element);
    void pushFront(int element);
    void insert(int index,int element);
}

//因为还有一个接口没有实现，所以是抽象类
abstract class AbstractList implements List{
    protected int size=0;

    @Override//头插
    public void pushFront(int element) {
        insert(0,element);
    }
    @Override//尾插
    public void pushBack(int element) {
        insert(size,element);
    }
}

//顺序表，继承AbstractList类，实现List接口
class ArrayList extends AbstractList implements List{
    private int[]array=new int[100];

    @Override
    public void insert(int index, int element) {
        for(int i=size-1;i>=index;i--){
            array[i+1]=array[i];
        }
        array[index]=element;
        size++;
    }
}

class Node{
    int val;
    Node next;
    public Node(int val){
        this.val=val;
    }
}
class LinkList extends AbstractList implements List{

    @Override
    public void insert(int index, int element) {
        Node node=new Node(element);
        for(int i=0;i<index;i++){
            
        }
    }
}
